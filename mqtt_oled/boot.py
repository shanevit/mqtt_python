##################################### Knihovny verze 1.3.2020 v2# MQTT bez ssl# CZUB# opraven utime####################################from umqtt.robust import MQTTClientimport ubinasciiimport machineimport micropythonimport networkimport espimport utimeimport gcglobal cas_konecdef pripoj_se_scan(station):    # pripoji se k wifi a mqtt    # prohleda dostupne site a pokud najde shodu site, tak se pripoji    import credentials    # pri_udaje_ssid = ['ssid1', 'ssid2']    # pri_udaje_pass = ['pass1', 'pass2']    # pri_udaje_mqtt = ['mqtt1', 'mqtt2']    pri_udaje_ssid = credentials.pri_udaje_ssid    pri_udaje_pass = credentials.pri_udaje_pass    pri_udaje_mqtt = credentials.pri_udaje_mqtt    print("Connecting to wifi...")    nets = station.scan()    nalezeno = False    for net in nets:        sit = str(net[0]).strip( "b'" )        if sit in pri_udaje_ssid:            nalezeno = True            print('{} found!'.format(sit))            kde = pri_udaje_ssid.index(sit)            station.connect(pri_udaje_ssid[kde], pri_udaje_pass[kde])                        while not station.isconnected():                machine.idle() # save power while waiting            print('WLAN connection succeeded!')            break    if nalezeno:            return pri_udaje_mqtt[kde]    else:        print('neni znama sit!')        def oled_show_msg(msg, x, y, fill):    # vystup stringu na oled display    # msg = zprava co ma vypsat    # x = x souradnice vypisu    # y = y souradnice vypisu    # fill = [True/False] vymazani displaye    if fill:        oled.fill(0)    oled.text(msg, x, y)    oled.show()def sub_cb(topic, msg):    # zpracuje prijate MQTT zpravy    print (topic, msg) # zobrazi ziskanou mqtt zpravu     if topic == b'esp32/temp':        msgoled = '{}'.format(str(msg).strip( "b'" ))        oled_show_msg(msgoled, 0, 25, True)        blink_ms(100, False)def connect():    # pripoji se k MQTT serveru    global client_id, mqtt_server    client = MQTTClient(client_id, mqtt_server)    client.connect()    print('Connected to MQTT broker')    return clientdef subscribe():    # prihlasi se k odberu zprav    client.set_callback(sub_cb)    client.subscribe(topic_sub)    print('Subscribed to %s topic' % (topic_sub))  def restart_and_reconnect():    # restaruje se    print('Failed to connect to MQTT broker. Reconnecting...')    utime.sleep(10)    machine.reset()def publish_msg(topic_pub, msg):    # odesle MQTT zpravu do daneho topicu    client.publish(topic_pub, msg)        def blink_ms(delka = 0,logika = True):    global cas_konec    if logika:        on = 1        off = 0    else:        on = 0        off = 1    if delka == 0:        zapnout = False    else:        zapnout = True    cas = utime.ticks_ms()    if zapnout:        led.value(on)        cas_konec = utime.ticks_add(cas, delka)    else:        if cas > cas_konec:            led.value(off)def blink(delka = 0):    global cas_konec    if delka == 0:        zapnout = False    else:        zapnout = True    cas = utime.time()    if zapnout:        led.value(1)        cas_konec = cas + delka    else:        if cas > cas_konec:            led.value(0)